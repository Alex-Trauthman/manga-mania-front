package br.unitins.topicos1.service;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

// import br.unitins.topicos1.model.Tijolo;
// import br.unitins.topicos1.repository.TijoloRepository;
import br.unitins.topicos1.validation.ValidationException;
import jakarta.inject.Inject;
import jakarta.transaction.Transactional;

public class FileServiceImpl implements FileService {
    private final String PATH_USER = System.getProperty("user.dir")
            + File.separator + "images"
            + File.separator + "tijolos" + File.separator;

    // @Inject
    // TijoloRepository tijoloRepository;

    @Override
    @Transactional
    public void salvar(Long id, String nomeImagem, byte[] imagem) {
       /*  Tijolo tijolo = tijoloRepository.findById(id);
        try {
            tijolo.setImagem(salvarImagem(nomeImagem, imagem));
        } catch (IOException e) {
            new ValidationException("nomeImagem", e.getMessage());
        } */
    }


    @Override
    public void deleteImagem(Long id)  {};

    @Override
    public String salvarImagem(String nomeImagem, byte[] imagem) throws IOException {
/*         String mimeType = Files.probeContentType(new File(nomeImagem).toPath());
        List<String> listMimeType = Arrays.asList("image/jpg", "image/jpeg", "image/png", "image/gif");
        if (!listMimeType.contains(mimeType)) {
            throw new IOException("Imagem nÃ£o suportada");
        }
        if (imagem.length > (1024 * 1024 * 10)) {
            throw new IOException("Imagem maior do que 10MB.");
        }
        File diretorio = new File(PATH_USER);
        if (!diretorio.exists())
            diretorio.mkdir();

        String nomeArquivo = UUID.randomUUID()
                + "." + mimeType.substring(mimeType.lastIndexOf("/") + 1);

        File file = new File(PATH_USER + nomeImagem);
        if (file.exists()) {
            throw new IOException("Nome de imagem repetida.");
        }
        file.createNewFile();

        FileOutputStream fos = new FileOutputStream(file);
        fos.write(imagem);
        fos.flush();
        fos.close();

        return nomeArquivo; */
    }

    @Override
    public File download(String nomeImagem) {
        return new File(PATH_USER + nomeImagem);
    }
}
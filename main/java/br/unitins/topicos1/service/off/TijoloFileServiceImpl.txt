package br.unitins.topicos1.service;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jboss.logging.Logger;

// import br.unitins.topicos1.model.Tijolo;
// import br.unitins.topicos1.repository.TijoloRepository;
import br.unitins.topicos1.validation.BeanValidationExceptionMapper;
import br.unitins.topicos1.validation.ValidationException;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import jakarta.transaction.Transactional;

@ApplicationScoped
public class TijoloFileServiceImpl implements FileService {
/*     private final String PATH_USER = System.getProperty("user.dir")
            + File.separator + "images"
            + File.separator + "tijolos" + File.separator;

    private static final Logger LOG = Logger.getLogger(BeanValidationExceptionMapper.class);

    @Inject
    TijoloRepository tijoloRepository;

    @Override
    @Transactional
    public void salvar(Long id, String nomeImagem, byte[] imagem) {
        Tijolo tijolo = tijoloRepository.findById(id);
        try {
            tijolo.setImagem(salvarImagem(nomeImagem, imagem));
        } catch (IOException e) {
            throw new ValidationException("imagem", e.getMessage());
        } */
    }

    @Override
    @Transactional
    public void deleteImagem(Long id) {
        Tijolo tijolo = tij/* oloRepository.findById(id);
        if(tijolo == null) return;
        tijolo.setImagem(null); */
    }

    public String salvarImagem(String nomeImagem, byte[] imagem) throws IOException {
/*         String mimeType = Files.probeContentType(new File(nomeImagem).toPath());
        List<String> listMimeType = Arrays.asList("image/jpg", "image/gif", "image/png", "image/jpeg");
        if (!listMimeType.contains(mimeType)) {
            throw new IOException("Tipo de imagem não suportado.");
        }

        if (imagem.length > 1024 * 1024 * 10) {
            throw new IOException("Arquivo muito grande, tamanho máximo 10mb.");
        }

        LOG.info(PATH_USER);
        File diretorio = new File(PATH_USER);
        if (!diretorio.exists()) {
            diretorio.mkdirs();
        }

        String nomeArquivo = UUID.randomUUID()
                + "."
                + mimeType.substring(mimeType.lastIndexOf("/") + 1);

        File file = new File(PATH_USER + nomeArquivo);
        if (file.exists()) {
            throw new IOException("Este arquivo ja existe.");
        }

        file.createNewFile();

        FileOutputStream stream = new FileOutputStream(file);
        stream.write(imagem);
        stream.flush();
        stream.close();

        return nomeArquivo; */
    }

    @Override
    public File download(String nomeImagem) {
        // return new File(PATH_USER + nomeImagem);
    }
}